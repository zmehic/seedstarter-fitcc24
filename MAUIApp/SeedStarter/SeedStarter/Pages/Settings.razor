@inject NavigationManager navigationManager

@using Data;
@using System.Drawing;
@using FireSharp.Config
@using FireSharp.Interfaces
@using FireSharp.Response
@using MudBlazor;
@using Newtonsoft.Json
@page "/Settings"



<div>
    <nav class="navbar fixed-top navbar-expand navbar-light" style="background-color: rgb(6,187,100); height:65px" aria-label="Second navbar example">
        <div class="container-fluid" style=" width:100%; height:50px">

            <div class="collapse navbar-collapse" id="navbarsExample02" style="width:100%; display:flex; justify-content:center; align-content:center;">
                <div style="width:100%; height:100%; ">
                    <div style="height:60px; width:100%; display:flex; align-items:center;">
                        <div style="height:100%; display:flex; align-items:center">
                            <img src="images\settings.png" style="width:30px; height:30px;" />
                            <label style="color:white; margin-left:10px;"> Settings</label>
                        </div>

                        <div style=" margin-left:auto">
                            <img src="images\logo.png" style="width:30px; height:30px;" />
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </nav>
</div>

<MudSwipeArea OnSwipeEnd="Chng" Style="width: 100%; height: 100%" Sensitivity="125">
<div class="container" style="width:100%;  margin-bottom:70px">
        <div class="row row-cols-1 row-cols-md-1 g-4" style="width:100%; margin-left:5px;background-color:rgba(237,237,237);">
        <div class="col" style="display:flex; justify-content:center; width:100%">
            <div style="width:100%;">
                <div style="width:100%; margin-bottom:30px;">
                    <label><b>Choose work module</b></label>
                </div>
                <div style="display:inline-flex; width:100%;  display:flex; justify-content:center;">
                    <div style="width:100px; height:100px;  margin-right:18px; ">
                        <div style="width:100%; height:80%;  display:flex; justify-content:center; ">
                            <img @onclick="()=>ModuleChange(1)" src="images\automatic.png" style="width:80%; height:100%; background-color:rgb(@clrAuto.R,@clrAuto.G,@clrAuto.B);border-radius:50%; cursor:pointer" />
                        </div>
                        <div style="width:100%; height:20%; display:flex; justify-content:center;">
                            <label>Auto</label>
                        </div>
                    </div>
                    <div style="width:100px; height:100px; margin-right:18px;">
                        <div style="width:100%; height:80%;  display:flex; justify-content:center">
                            <img @onclick="()=>ModuleChange(2)" src="images\semiauto.png" style="width:80%; height:100%;background-color:rgb(@clrSemiAuto.R,@clrSemiAuto.G,@clrSemiAuto.B);border-radius:50%; cursor:pointer" />
                        </div>
                        <div style="width:100%; height:20%; display:flex; justify-content:center; ">
                            <label>Semi-auto</label>
                        </div>
                    </div>
                    <div style="width:100px; height:100px;">
                        <div style="width:100%; height:80%;display:flex; justify-content:center">
                            <img @onclick="()=>ModuleChange(3)" src="images\manual.png" style="width:80%; height:100%;background-color:rgb(@clrManual.R,@clrManual.G,@clrManual.B);border-radius:50%; cursor:pointer" />
                        </div>
                        <div style="width:100%; height:20%; display:flex; justify-content:center;">
                            <label>Manual</label>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="col" style="display:flex; justify-content:center; width:100%">
            <label hidden="@autoCondition" style="color:red"><b>You have to pick a crop for this mode!</b></label>
        </div>
        
    </div>

        <div class="row row-cols-1 row-cols-md-2 g-4" style="margin-top:20px; background-color:rgba(237,237,237);">
        <div class="col">
            <div style="width:100%; height:50px; display:flex; justify-content:center;align-items:center">
                <div style="display:inline-flex;width:67%; justify-content:center;align-items:center">
                    <label style="margin-right:10px">Crop:  </label>
                    <div style="width:70%">
                        <select  @onchange=@Promjena style="width:100%; color:white; background-color:rgb(6,187,100);" class="form-select" aria-label="Default select example">
                            <option value=0>Odaberite usjev</option>
                            @foreach(var obj in usjevi)
                                {
                                    <option ng-selected="@obj.Selected==true" value="@obj.Id">@obj.Name</option>
                                }
                                @* <option value="@Data.GlobalValues.listaUsjeva[3].Id">@Data.GlobalValues.listaUsjeva[3].Name</option>
                            <option ng-selected="==@Data.GlobalValues.listaUsjeva[0]" value="@Data.GlobalValues.listaUsjeva[0].Id">@Data.GlobalValues.listaUsjeva[0].Name</option>
                                <option value="@Data.GlobalValues.listaUsjeva[1].Id">@Data.GlobalValues.listaUsjeva[1].Name</option>
                            <option value="@Data.GlobalValues.listaUsjeva[2].Id">@Data.GlobalValues.listaUsjeva[2].Name</option> *@
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="col" style=" height:250px;display:flex; align-items:center; justify-content:center">
            <div class="" style=" width:100%; height:100%; border-radius:30px; display:flex;align-items:center; justify-content:center; padding-bottom:50px;border:solid 2px green ">

                <div style="width:80%; height:100%">
                    <div style="width:100%; height:25%;  display:flex; justify-content:center; align-items:center">
                        <label><b>Key parameters: @currentCrop.Name</b></label>
                    </div>
                    <div style="width:100%; height:25%;  display:inline-flex; margin-bottom:10px">
                        <div style="width:20%; height:100%; display:flex; align-items:center; justify-content:center">
                            <img src="images\temperature.png" style="max-height:80%; max-width:80%" />
                        </div>
                        <div style="width:60%; height:100%; display:flex; align-items:center;">
                            <label>Temperature</label>
                        </div>
                        <div style="width:20%; height:100%; background-color:rgb(6,187,100); border-radius:10px;display:flex; align-items:center; justify-content:center ">
                            <label style="color:white">@currentCrop.Temp °C</label>
                        </div>
                    </div>
                    <div style="width:100%; height:25%;display:inline-flex;margin-bottom:10px">
                        <div style="width:20%; height:100%; display:flex; align-items:center; justify-content:center">
                            <img src="images\soil.png" style="max-height:80%; max-width:80%" />
                        </div>
                        <div style="width:60%; height:100%; display:flex; align-items:center;">
                            <label>Soil humidity</label>
                        </div>
                        <div style="width:20%; height:100%; background-color:rgb(6,187,100); border-radius:10px;display:flex; align-items:center; justify-content:center ">
                            <label style="color:white">@currentCrop.SoilHumidity %</label>
                        </div>
                    </div>
                    <div style="width:100%; height:25%;display:inline-flex ">
                        <div style="width:20%; height:100%; display:flex; align-items:center; justify-content:center">
                            <img src="images\humidity.png" style="max-height:80%; max-width:80%" />
                        </div>
                        <div style="width:60%; height:100%; display:flex; align-items:center;">
                            <label>Humidity</label>
                        </div>
                        <div style="width:20%; height:100%; background-color:rgb(6,187,100); border-radius:10px;display:flex; align-items:center; justify-content:center ">
                            <label style="color:white">@currentCrop.Humidity %</label>
                        </div>
                    </div>
                    
                </div>

            </div>

        </div>
       
    </div>
</div>
</MudSwipeArea>
@code {
    public string color = "blue";
    public bool autoCondition = true;

    SwipeDirection _swipeDirection;

    IFirebaseConfig configg;

    int tempValue;
    int soilHumidity;
    int humidity;
    bool Auto;
    bool Manual;
    bool SemiAuto;

    List<Crop> usjevi;
    SelectedCrop currentCrop;

    public static System.Drawing.Color clrOn = System.Drawing.Color.FromArgb(0, 206, 209);
    public static System.Drawing.Color clrOff = System.Drawing.Color.FromArgb(128, 128, 128);

    public static System.Drawing.Color clrManual = clrOff;
    public static System.Drawing.Color clrAuto = clrOff;
    public static System.Drawing.Color clrSemiAuto = clrOff;

    protected override async Task OnInitializedAsync()
    {

        await StartupOne();
        await StartupTwo();

    }

    Task StartupOne()
    {
        configg = new FirebaseConfig()
            {
                AuthSecret = "9kYvaeMdIRNFA0WmoNqyCv4rBapIGyCDOptrQIyF",
                BasePath = "https://seedstarter-f9b21-default-rtdb.europe-west1.firebasedatabase.app/"
            };

        return Task.CompletedTask;
    }
    IFirebaseClient client;
    Task StartupTwo()
    {
        client = new FireSharp.FirebaseClient(configg);
        GetCrops();
        GetModes();
        GetCurrentCrop();
        StateHasChanged();

        return Task.CompletedTask;

    }

    void GetCurrentCrop()
    {
        FirebaseResponse res = client.Get("Selected/Crop");
        currentCrop = res.ResultAs<SelectedCrop>();
        StateHasChanged();
    }


    void GetCrops()
    {
        FirebaseResponse res = client.Get("Crops");
        usjevi = JsonConvert.DeserializeObject<List<Crop>>(res.Body.ToString());
        usjevi.RemoveAt(0);
        GlobalValues.listaUsjeva = usjevi;
    }

    void GetModes()
    {
        FirebaseResponse res = client.Get("Mode");
        Dictionary<string, bool> modes = JsonConvert.DeserializeObject<Dictionary<string, bool>>(res.Body.ToString());

        Manual = modes.Where(x => x.Key == "Manual").First().Value;
        SemiAuto = modes.Where(x => x.Key == "SemiAuto").First().Value;
        Auto = modes.Where(x => x.Key == "Auto").First().Value;

        if(Manual==true)
        {
            clrManual = GlobalValues.clrOn;
            clrSemiAuto = GlobalValues.clrOff;
            clrAuto = GlobalValues.clrOff;
        }
        else if(SemiAuto==true)
        {
            clrManual = GlobalValues.clrOff;
            clrSemiAuto = GlobalValues.clrOn;
            clrAuto = GlobalValues.clrOff;
        }
        else
        {
            clrManual = GlobalValues.clrOff;
            clrSemiAuto = GlobalValues.clrOff;
            clrAuto = GlobalValues.clrOn;
        }
        StateHasChanged();
    }

    private void Chng(SwipeEventArgs a)
    {
        if (a.SwipeDirection.ToString() == "LeftToRight")
        {
            navigationManager.NavigateTo("/Statistics");
        }

    }



    void Promjena(ChangeEventArgs e)
    {
        var crop = usjevi.Where(x => x.Id.ToString() == e.Value.ToString()).FirstOrDefault();

        if(crop!=null)
        {
            var setter = client.Update($"Crops/{e.Value.ToString()}", new
            {
                Humidity = crop.Humidity,
                Id = crop.Id,
                Name = crop.Name,
                Selected = true,
                SoilHumidity = crop.SoilHumidity,
                Temp = crop.Temp
            });
            foreach(var crp in usjevi)
            {
                if(crp.Id.ToString()!=(e.Value.ToString()))
                {
                    var setter2 = client.Update($"Crops/{crp.Id}", new
                    {
                        Humidity = crp.Humidity,
                        Id = crp.Id,
                        Name = crp.Name,
                        Selected = false,
                        SoilHumidity = crp.SoilHumidity,
                        Temp = crp.Temp
                    });
                }
            }
            var setter3 = client.Update("Selected/Crop", new
            {
                Humidity = crop.Humidity,
                Name = crop.Name,
                SoilHumidity = crop.SoilHumidity,
                Temp = crop.Temp
            });
            GetCurrentCrop();
        }
        else
        {
            var setter = client.Update("Selected/Crop", new
            {
                Humidity = 0,
                Name = "",
                SoilHumidity = 0,
                Temp = 0
            });

            foreach (var crp in usjevi)
            {
                if (crp.Id.ToString() != (e.Value.ToString()))
                {
                    var setter2 = client.Update($"Crops/{crp.Id}", new
                    {
                        Humidity = crp.Humidity,
                        Id = crp.Id,
                        Name = crp.Name,
                        Selected = false,
                        SoilHumidity = crp.SoilHumidity,
                        Temp = crp.Temp
                    });
                }
            }

            ModuleChange(3);
            GetCurrentCrop();
        }

    }



    void ModuleChange(int a)
    {
        if(a==1)
        {
            if (currentCrop.Name == "")
            {
                autoCondition = false;
                var setter = client.Update($"Mode", new
                {
                    Auto = false,
                    Manual = true,
                    SemiAuto = false
                });



            }
            else
            {
                autoCondition = true;
                var setter = client.Update($"Mode", new
                {
                    Auto = true,
                    Manual = false,
                    SemiAuto = false
                });
            }


        }
        else if(a==2)
        {
            if (currentCrop.Name == "")
            {
                autoCondition = true;

                var setter = client.Update($"Mode", new
                {
                    Auto = false,
                    Manual = false,
                    SemiAuto = true
                });
            }
            else
            {
                autoCondition = true;

                var setter = client.Update($"Mode", new
                {
                    Auto = false,
                    Manual = false,
                    SemiAuto = true
                });
            }
        }
        else if (a == 3)
        {
            autoCondition = true;


            var setter = client.Update($"Mode", new
            {
                Auto = false,
                Manual = true,
                SemiAuto = false
            });

        }

        GetModes();
        StateHasChanged();
    }
}
